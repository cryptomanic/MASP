row <- nrow(data)
col <- ncol(data)
allrules <- list()
for(i in 1:length(itemsMinRow)) {
help <- itemsMinRow[[i]]
root <- generateMaspTree2(data[(as.numeric(help[1])):row, , drop = FALSE], support, confidence)
lrs <- generateAllMaspRulesMod(root, help[-1])
allrules <- append(allrules, lrs)
}
unique(allrules)
}
max_rule_size <- function(rules) {
max(0, sapply(rules, function(rule) length(strsplit(rule, ",")[[1]]) + 1))
}
library(tidyverse) # support .60 confidence .30
tdt <- tribble(~C1, ~C2, ~C3, ~C4, ~C5,
'1', '2', '3', '4', '5',
'1', '5', '3', '4', '2',
'8', '1', '9', '2', '3',
'9', '2', '3', '1', '7',
'1', '9', '3', '8', '7',
'1', '8', '3', '2', '7')
# for old algo
dfdt <- as.data.frame(tdt)
for(i in 1:5) dfdt[[i]] <- as.integer(dfdt[[i]])
# for new algo
mtdt <- as.matrix(dfdt)
mtdt[1, 1] <- as.character(mtdt[1, 1])
root1 <- generateMaspTree(dfdt, .60, .3)
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(mtdt, .6, .3)
max_rule_size(old_rules)
library(data.tree)
root1 <- generateMaspTree(dfdt, .60, .3)
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(mtdt, .6, .3)
max_rule_size(old_rules)
max_rule_size(new_rules)
dfdt
write.csv(dfdt, "A.csv")
write.csv(dfdt, "A.csv", quote = F)
write.csv(dfdt, "A.csv", quote = F, row.names = F)
write.csv(dfdt, "A.csv", quote = F, row.names = F, col.names = F)
write.csv(dfdt, "A.csv", quote = F, row.names = F)
#lowram #stuck #testcase
generate.data.mod <- function(nrow, ncol, rng) {
data <- matrix(nrow = nrow, ncol = ncol)
for(i in 1:nrow) {
data[i, ] <- sample(1:rng, ncol)
}
old_data <- as.data.frame(data)
new_data <- data
new_data[1, 1] <- as.character(new_data[1, 1])
list(old_data = old_data, new_data = new_data)
}
set.seed(10001)
cdata <- generate.data.mod(20, 20, 25)
root1 <- generateMaspTree(cdata$old_data, .1, .05)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .1, .05)
max_rule_size(old_rules)
max_rule_size(new_rules)
cdata$old_data
write.csv(cdata$old_data, "../Gen Dataset/B.csv", quote = F, row.names = F)
set.seed(1010)
cdata <- generate.data.mod(40, 40, 47)
root1 <- generateMaspTree(cdata$old_data, .1, .05)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .1, .05)
length(old_rules)
length(new_rules)
max_rule_size(old_rules)
max_rule_size(new_rules)
write.csv(cdata$old_data, "../Gen Dataset/C.csv", quote = F, row.names = F)
set.seed(1010)
cdata <- generate.data.mod(100, 100, 105)
root1 <- generateMaspTree(cdata$old_data, .03, .001)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .03, .001)
length(old_rules)
length(new_rules)
write.csv(cdata$old_data, "../Gen Dataset/D.csv", quote = F, row.names = F)
set.seed(1010)
cdata <- generate.data.mod(1000, 1000, 1020)
root1 <- generateMaspTree(cdata$old_data, .3, .01)
root1
length(old_rules)
old_rules <- generateAllMaspRules(root1)
set.seed(1010)
cdata <- generate.data.mod(1000, 1000, 1020)
root1 <- generateMaspTree(cdata$old_data, .3, .01)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .3, .01)
write.csv(cdata$old_data, "../Gen Dataset/E.csv", quote = F, row.names = F)
library(data.tree)
# generate masp tree
# query: query to get masp block
# root: root of the sub tree
# block: if true implies block else counterblock
library(data.tree)
MASP.TREE <- function(query, root, block) {
query1 <- query[[1]]
query2 <- query[[2]]
d <- D[eval(parse(text = query1)), c(query2), drop = FALSE]
if(nrow(d) == 0 || ncol(d) == 0) {
return()
}
root$query1 <- query1
root$query2 <- query2
gmax <- 0
gind <- 0
for (i in 1:ncol(d)) {
max <- 0
r <- d[, i, drop = FALSE]
t <- table(r)
for (j in 1:length(t)) {
if (t[j] > max)
max = t[j]
}
if (max > gmax) {
gmax = max
gind = i
}
}
colname <- colnames(d)[gind]
result <- list()
result[[1]] <- paste0(query1, " & D$", colname, " == ", names(gmax))
result[[2]] <- query2[query2 != colname]
aresult <- list()
aresult[[1]] <- paste0(query1, " & D$", colname, " != ", names(gmax))
aresult[[2]] <- query2
# nrow.d <- nrow(d)
# rm(d)
if(gmax/nrow(D) >= S) {
if(gmax/nrow(d) >= C) {
lchild <- root$AddChild(paste0(colname, "=", names(gmax)))
MASP.TREE(result, lchild, TRUE)
if((nrow(d)-gmax)/nrow(D) >= S) {
if((nrow(d)-gmax)/nrow(d) >= C) {
rchild <- root$AddChild(paste0("~", paste0(colname, "=", names(gmax))))
MASP.TREE(aresult, rchild, FALSE)
}
}
}
}
}
library(data.tree)
# generate masp tree
# query: query to get masp block
# root: root of the sub tree
# block: if true implies block else counterblock
MASP.TREE <- function(query, root, block) {
query1 <- query[[1]]
query2 <- query[[2]]
d <- D[eval(parse(text = query1)), c(query2), drop = FALSE]
if(nrow(d) == 0 || ncol(d) == 0) {
return()
}
root$query1 <- query1
root$query2 <- query2
gmax <- 0
gind <- 0
for (i in 1:ncol(d)) {
max <- 0
r <- d[, i, drop = FALSE]
t <- table(r)
for (j in 1:length(t)) {
if (t[j] > max)
max = t[j]
}
if (max > gmax) {
gmax = max
gind = i
}
}
colname <- colnames(d)[gind]
result <- list()
result[[1]] <- paste0(query1, " & D$", colname, " == ", names(gmax))
result[[2]] <- query2[query2 != colname]
aresult <- list()
aresult[[1]] <- paste0(query1, " & D$", colname, " != ", names(gmax))
aresult[[2]] <- query2
# nrow.d <- nrow(d)
# rm(d)
if(gmax/nrow(D) >= S) {
if(gmax/nrow(d) >= C) {
lchild <- root$AddChild(paste0(colname, "=", names(gmax)))
MASP.TREE(result, lchild, TRUE)
if((nrow(d)-gmax)/nrow(D) >= S) {
if((nrow(d)-gmax)/nrow(d) >= C) {
rchild <- root$AddChild(paste0("~", paste0(colname, "=", names(gmax))))
MASP.TREE(aresult, rchild, FALSE)
}
}
}
}
}
D = NULL;S = NULL; C = NULL;
generateMaspTree <- function(data, support = 0.2, confidence = 0.3) {
if(!(support >= 0 && support <= 1)) {
stop("support value must belongs to [0, 1]")
}
if(!(confidence >= 0 && confidence <= 1)) {
stop("confidence value must belongs to [0, 1]")
}
if(! is.data.frame(data)) {
stop("data must be a data frame")
}
D <<- data
S <<- support
C <<- confidence
query <- list()
query[[1]] <- "TRUE"
query[[2]] <- colnames(D)
root <- Node$new("ROOT")
MASP.TREE(query, root, TRUE)
root
}
d <- data.frame(A1 = c(1,2,3,4))
d$A2 <- c(2, 4, 2, 2)
d$A3 <- c(3, 3, 4, 3)
d$A4 = c(4, 1, 1, 1)
d
root <- generateMaspTree(data = d, support = 0.50, confidence = 0.2)
plot(root)
d <- data.frame(A1 = c(1,1,1,1))
d$A2 <- c(2, 2, 2, 2)
d$A3 <- c(3, 3, 3, 3)
d$A4 = c(4, 4, 4, 4)
root <- generateMaspTree(data = d, support = 0.50, confidence = 0.2)
plot(root)
library(data.tree)
MASP.TREE.2 <- function(data, root, block) {
if(nrow(data) == 0 || ncol(data) == 0) {
return()
}
# list of
#   1. frequent item
#   2. block
#   3. counter block
l <- fitem_matrs(data)
fitem <- l[[1]]
tblock <- l[[2]]
tcblock <- l[[3]]
if(nrow(tblock)/nrow(D) >= S) {
if(nrow(tblock)/nrow(data) >= C) {
lchild <- root$AddChild(fitem)
MASP.TREE.2(tblock, lchild, TRUE)
if(nrow(tcblock)/nrow(D) >= S) {
if(nrow(tcblock)/nrow(data) >= C) {
rchild <- root$AddChild(paste0("~", fitem))
MASP.TREE.2(tcblock, rchild, FALSE)
}
}
}
}
}
D <- S <- C <- NULL
generateMaspTree2 <- function(data, support = 0.2, confidence = 0.3) {
if(!(support >= 0 && support <= 1)) {
stop("support value must belongs to [0, 1]")
}
if(!(confidence >= 0 && confidence <= 1)) {
stop("confidence value must belongs to [0, 1]")
}
if(! is.matrix(data)) {
stop("data must be a matrix")
}
D <<- data
S <<- support
C <<- confidence
root <- Node$new("ROOT")
MASP.TREE.2(data, root, TRUE)
root
}
dtdt <- tribble(~C1, ~C2, ~C3, ~C4, ~C5,
'1', '12', '3', '4', '5',
'1', '5', '6', '4', '12',
'8', '6', '9', '12', '5',
'9', '2', '3', '6', '7',
'6', '9', '10', '8', '7',
'1', '8', '3', '2', '7')
dfdt <- as.data.frame(dtdt)
mtdt <- as.matrix(dfdt)
mtdt[1, 1] <- as.character(mtdt[1, 1])
library(tidyverse)
dtdt <- tribble(~C1, ~C2, ~C3, ~C4, ~C5,
'1', '12', '3', '4', '5',
'1', '5', '6', '4', '12',
'8', '6', '9', '12', '5',
'9', '2', '3', '6', '7',
'6', '9', '10', '8', '7',
'1', '8', '3', '2', '7')
dfdt <- as.data.frame(dtdt)
mtdt <- as.matrix(dfdt)
mtdt[1, 1] <- as.character(mtdt[1, 1])
mat[1, 1] <- as.character(mat[1, 1])
plot(root2 <- generateMaspTree2(mat, .2, .3))
plot(root2 <- generateMaspTree2(mtdt, .2, .3))
mtdt
root2 <- generateMaspTree2(mtdt, .2, .3)
View(fitem_matrs)
Rcpp::sourceCpp('matrixop.cpp')
root2 <- generateMaspTree2(mtdt, .2, .3)
plot(root2)
mtdt
mtdt[5:6]
mtdt[5:6,]
plot(root2 <- generateMaspTree2(mtdt[5:6], .2, .3))
plot(root2 <- generateMaspTree2(mtdt[5:6,], .2, .3))
longestRuleSizeMod <- function(root, item) {
nodes <- Traverse(root, filterFun = isLeaf)
pinroot <- lapply(nodes, FUN = function(node){node$path})
pexroot <- lapply(pinroot, FUN = function(v){v[-1]})
max(sapply(pexroot, function(x) ifelse(item %in% x, length(x), 0)))
}
generateMaspRulesMod <- function(masp, items) {
l <- length(masp)-1
if(l == 0 || !any(items %in% masp)) {
return(list())
}
where_occur <- length(masp)
for(i in 1:length(items)) {
where_occur <- min(which(masp == items[i]), where_occur)
}
rules <- list()
for(i in 1:l) {
rule <- paste0("(")
for(j in 1:i) {
if(j == i)
rule <- paste0(rule, masp[j], ")")
else
rule <- paste0(rule, masp[j], ", ")
}
rule <- paste0(rule, " -> (", masp[i+1], ")")
if(where_occur <= i+1)
rules <- append(rules, rule)
}
rules
}
generateAllMaspRulesMod <- function(root, items) {
nodes <- Traverse(root, filterFun = isLeaf)
pinroot <- lapply(nodes, FUN = function(node){node$path})
pexroot <- lapply(pinroot, FUN = function(v){v[-1]})
allRules <- list()
for(i in 1:length(pexroot)) {
rules <- generateMaspRulesMod(pexroot[[i]], items)
allRules <- append(allRules, rules)
}
allRules
}
new_model <- function(data, support = 0.3, confidence = 0.2) {
# itemsMinRow is a list
# first element is the row number after that which items first appear in this row
itemsMinRow <- uniqueItems(data)
print(itemsMinRow)
row <- nrow(data)
col <- ncol(data)
allrules <- list()
for(i in 1:length(itemsMinRow)) {
help <- itemsMinRow[[i]]
root <- generateMaspTree2(data[(as.numeric(help[1])):row, , drop = FALSE], support, confidence)
lrs <- generateAllMaspRulesMod(root, help[-1])
allrules <- append(allrules, lrs)
}
unique(allrules)
}
max_rule_size <- function(rules) {
max(0, sapply(rules, function(rule) length(strsplit(rule, ",")[[1]]) + 1))
}
library(tidyverse) # support .60 confidence .30
tdt <- tribble(~C1, ~C2, ~C3, ~C4, ~C5,
'1', '2', '3', '4', '5',
'1', '5', '3', '4', '2',
'8', '1', '9', '2', '3',
'9', '2', '3', '1', '7',
'1', '9', '3', '8', '7',
'1', '8', '3', '2', '7')
tdt
dfdt <- as.data.frame(tdt)
for(i in 1:5) dfdt[[i]] <- as.integer(dfdt[[i]])
mtdt <- as.matrix(dfdt)
mtdt[1, 1] <- as.character(mtdt[1, 1])
root1 <- generateMaspTree(dfdt, .60, .3)
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(mtdt, .6, .3)
max_rule_size(old_rules)
max_rule_size(new_rules)
old_rules
new_rules
generate.data.mod <- function(nrow, ncol, rng) {
data <- matrix(nrow = nrow, ncol = ncol)
for(i in 1:nrow) {
data[i, ] <- sample(1:rng, ncol)
}
old_data <- as.data.frame(data)
new_data <- data
new_data[1, 1] <- as.character(new_data[1, 1])
list(old_data = old_data, new_data = new_data)
}
set.seed(10001)
cdata <- generate.data.mod(20, 20, 25)
cdata$old_data
root1 <- generateMaspTree(cdata$old_data, .1, .05)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .1, .05)
max_rule_size(old_rules)
max_rule_size(new_rules)
old_rules
new_rules
set.seed(1010)
cdata <- generate.data.mod(40, 40, 47)
root1 <- generateMaspTree(cdata$old_data, .1, .05)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .1, .05)
length(old_rules)
length(new_rules)
max_rule_size(old_rules)
max_rule_size(new_rules)
set.seed(1010)
cdata <- generate.data.mod(100, 100, 105)
root1 <- generateMaspTree(cdata$old_data, .03, .001)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .03, .001)
length(old_rules)
length(new_rules)
max_rule_size(old_rules)
max_rule_size(new_rules)
set.seed(1010)
cdata <- generate.data.mod(1000, 1000, 1020)
root1 <- generateMaspTree(cdata$old_data, .3, .01)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .3, .01)
length(old_rules)
length(new_rules)
max_rule_size(old_rules)
max_rule_size(new_rules)
old_rules <- generateAllMaspRules(root1)
root1
tdt <- tribble(~C1, ~C2, ~C3, ~C4, ~C5,
'1', '2', '3', '4', '5',
'1', '5', '3', '4', '2',
'8', '1', '9', '2', '3',
'9', '2', '3', '1', '7',
'1', '9', '3', '8', '7',
'1', '8', '3', '2', '7')
dfdt <- as.data.frame(tdt)
for(i in 1:5) dfdt[[i]] <- as.integer(dfdt[[i]])
mtdt <- as.matrix(dfdt)
mtdt[1, 1] <- as.character(mtdt[1, 1])
root1 <- generateMaspTree(dfdt, .60, .3)
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(mtdt, .6, .3)
max_rule_size(old_rules)
max_rule_size(new_rules)
old_rules
new_rules
generate.data.mod <- function(nrow, ncol, rng) {
data <- matrix(nrow = nrow, ncol = ncol)
for(i in 1:nrow) {
data[i, ] <- sample(1:rng, ncol)
}
old_data <- as.data.frame(data)
new_data <- data
new_data[1, 1] <- as.character(new_data[1, 1])
list(old_data = old_data, new_data = new_data)
}
set.seed(10001)
cdata <- generate.data.mod(20, 20, 25)
root1 <- generateMaspTree(cdata$old_data, .1, .05)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .1, .05)
max_rule_size(old_rules)
max_rule_size(new_rules)
old_rules
new_rules
set.seed(1010)
cdata <- generate.data.mod(40, 40, 47)
root1 <- generateMaspTree(cdata$old_data, .1, .05)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .1, .05)
length(old_rules)
length(new_rules)
max_rule_size(old_rules)
max_rule_size(new_rules)
set.seed(1010)
cdata <- generate.data.mod(100, 100, 105)
root1 <- generateMaspTree(cdata$old_data, .03, .001)
root1
old_rules <- generateAllMaspRules(root1)
new_rules <- new_model(cdata$new_data, .03, .001)
length(old_rules)
length(new_rules)
max_rule_size(old_rules)
max_rule_size(new_rules)
set.seed(1010)
cdata <- generate.data.mod(1000, 1000, 1020)
root1 <- generateMaspTree(cdata$old_data, .3, .01)
root1
new_rules <- new_model(cdata$new_data, .3, .01)
length(new_rules)
max_rule_size(new_rules)
